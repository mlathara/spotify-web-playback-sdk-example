{"version":3,"sources":["WebPlayback.jsx","Login.js","App.js","index.js"],"names":["lut","name","uri","seek","track","album","images","url","artists","WebPlayback","props","is_paused","setPaused","useState","is_active","setActive","player","setPlayer","undefined","current_track","setTrack","async","setSong","song","fetch","method","headers","token","body","JSON","stringify","useEffect","script","document","createElement","src","appendChild","window","onSpotifyWebPlaybackSDKReady","Spotify","Player","getOAuthToken","cb","volume","addListener","_ref","device_id","console","log","_ref2","state","track_window","paused","getCurrentState","then","connect","_jsx","_Fragment","children","className","_jsxs","alt","onClick","togglePlay","Login","href","App","setToken","response","json","access_token","getToken","ReactDOM","render","React","StrictMode","HashRouter","getElementById"],"mappings":"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","file":"static/js/main.60aef46c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst lut = {\n    \"3\": {name: \"Balam Pichkari\", uri: \"spotify:track:18e3XXYCv4Tx8uUl1mP3CN\", seek: 72000},\n    \"37\": {name: \"Running Up That Hill\", uri: \"spotify:track:1PtQJZVZIdWIYdARpZRDFO\", seek: 166000}\n}\n\nconst track = {\n    name: \"\",\n    album: {\n        images: [\n            { url: \"\" }\n        ]\n    },\n    artists: [\n        { name: \"\" }\n    ]\n}\n\nfunction WebPlayback(props) {\n\n    const [is_paused, setPaused] = useState(false);\n    const [is_active, setActive] = useState(false);\n    const [player, setPlayer] = useState(undefined);\n    const [current_track, setTrack] = useState(track);\n\n    async function setSong(song) {\n      const response = await fetch(\n        'https://api.spotify.com/v1/me/player/play', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + props.token\n            },\n            body: JSON.stringify({\n                'uris': [song.uri],\n                'position_ms': song.seek\n            })\n        });\n      //const json = await response.json();\n      return response;\n    }\n\n    useEffect(() => {\n\n        const script = document.createElement(\"script\");\n        script.src = \"https://sdk.scdn.co/spotify-player.js\";\n        script.async = true;\n\n        document.body.appendChild(script);\n\n        window.onSpotifyWebPlaybackSDKReady = () => {\n\n            const player = new window.Spotify.Player({\n                name: 'Web Playback SDK',\n                getOAuthToken: cb => { cb(props.token); },\n                volume: 0.5\n            });\n\n            setPlayer(player);\n\n            player.addListener('ready', ({ device_id }) => {\n                console.log('Ready with Device ID', device_id);\n            });\n\n            player.addListener('not_ready', ({ device_id }) => {\n                console.log('Device ID has gone offline', device_id);\n            });\n\n            player.addListener('player_state_changed', ( state => {\n\n                if (!state) {\n                    return;\n                }\n\n                setTrack(state.track_window.current_track);\n                setPaused(state.paused);\n\n                player.getCurrentState().then( state => { \n                    (!state)? setActive(false) : setActive(true) \n                });\n\n            }));\n\n            player.connect();\n\n        };\n    }, []);\n\n    if (!is_active) { \n        return (\n            <>\n                <div className=\"container\">\n                    <div className=\"main-wrapper\">\n                        <b> Instance not active. Transfer your playback using your Spotify app </b>\n                    </div>\n                </div>\n            </>)\n    } else {\n        return (\n            <>\n                <div className=\"container\">\n                    <div className=\"main-wrapper\">\n\n                        <img src={current_track.album.images[0].url} className=\"now-playing__cover\" alt=\"\" />\n\n                        <div className=\"now-playing__side\">\n                            <div className=\"now-playing__name\">{current_track.name}</div>\n                            <div className=\"now-playing__artist\">{current_track.artists[0].name}</div>\n\n                            <button className=\"btn-spotify\" onClick={() => { player.togglePlay() }} >\n                                { is_paused ? \"PLAY\" : \"PAUSE\" }\n                            </button>\n\n                            <button className=\"btn-spotify\" onClick={() => {\n                                setSong(lut[\"3\"])\n                                }} >\n                                {\"3 - EL LAH-TH-RAH\"}\n                            </button>\n                            <button className=\"btn-spotify\" onClick={() => { \n                                setSong(lut[\"37\"])\n                                }} >\n                                {\"37 - EM-AH-LEE LOO-NING\"}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default WebPlayback\n","import React from 'react';\n\nfunction Login() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <a className=\"btn-spotify\" href=\"/auth/login\" >\n                    Login with Spotify \n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default Login;\n\n","import React, { useState, useEffect } from 'react';\nimport WebPlayback from './WebPlayback'\nimport Login from './Login'\nimport './App.css';\n\nfunction App() {\n\n  const [token, setToken] = useState('');\n\n  useEffect(() => {\n\n    async function getToken() {\n      const response = await fetch('/auth/token');\n      const json = await response.json();\n      setToken(json.access_token);\n    }\n\n    getToken();\n\n  }, []);\n\n  return (\n    <>\n        { (token === '') ? <Login/> : <WebPlayback token={token} /> }\n    </>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter><App /></HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}